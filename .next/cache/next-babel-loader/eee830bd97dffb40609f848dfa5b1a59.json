{"ast":null,"code":"import User from '../../models/User';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb'; // import { connection } from 'mongoose';\n\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case 'PUT':\n      await handlePutRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token \");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const user = await User.findOne({\n      _id: userId\n    });\n\n    if (user) {\n      res.status(200).json(user);\n    } else {\n      res.status(400).send(\"User not found\");\n    }\n  } catch (error) {\n    res.status(403).send(\"Invalid Token\");\n  }\n}\n\nasync function handlePutRequest(req, res) {\n  const {\n    _id,\n    role\n  } = req.body;\n  await User.findOneAndUpdate({\n    _id\n  }, {\n    role\n  });\n  res.status(203).send('User updated');\n}","map":{"version":3,"sources":["/Users/zacharycohen/Desktop/fantasybaseballapp/pages/api/account.js"],"names":["User","jwt","connectDb","req","res","method","handleGetRequest","handlePutRequest","status","send","headers","userId","verify","authorization","process","env","JWT_SECRET","user","findOne","_id","json","error","role","body","findOneAndUpdate"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB,C,CACA;;AAEAA,SAAS;AAET,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAmB;AAC9B,UAAOD,GAAG,CAACE,MAAX;AACC,SAAK,KAAL;AACG,YAAMC,gBAAgB,CAACH,GAAD,EAAKC,GAAL,CAAtB;AACA;;AACJ,SAAK,KAAL;AACI,YAAMG,gBAAgB,CAACJ,GAAD,EAAMC,GAAN,CAAtB;AACA;;AACJ;AACIA,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,UAASN,GAAG,CAACE,MAAO,cAA1C;AARJ;AAUH,CAXD;;AAaC,eAAeC,gBAAf,CAAgCH,GAAhC,EAAqCC,GAArC,EAAyC;AAEtC,MAAG,EAAE,mBAAmBD,GAAG,CAACO,OAAzB,CAAH,EAAqC;AACjC,WAAON,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,yBAArB,CAAP;AACH;;AACD,MAAG;AACC,UAAM;AAAEE,MAAAA;AAAF,QAAUV,GAAG,CAACW,MAAJ,CAAWT,GAAG,CAACO,OAAJ,CAAYG,aAAvB,EAChBC,OAAO,CAACC,GAAR,CAAYC,UADI,CAAhB;AAED,UAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACkB,OAAL,CAAa;AAACC,MAAAA,GAAG,EAAER;AAAN,KAAb,CAAnB;;AACC,QAAGM,IAAH,EAAQ;AACJb,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBH,IAArB;AAEH,KAHD,MAGK;AACDb,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACH;AACJ,GAVD,CAUC,OAAMY,KAAN,EAAY;AACTjB,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AAEH;AACJ;;AAED,eAAeF,gBAAf,CAAiCJ,GAAjC,EAAsCC,GAAtC,EAA0C;AACtC,QAAM;AAACe,IAAAA,GAAD;AAAMG,IAAAA;AAAN,MAAcnB,GAAG,CAACoB,IAAxB;AACA,QAAMvB,IAAI,CAACwB,gBAAL,CACF;AAACL,IAAAA;AAAD,GADE,EAEF;AAACG,IAAAA;AAAD,GAFE,CAAN;AAKAlB,EAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB;AAEH","sourcesContent":["import User from '../../models/User';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb';\n// import { connection } from 'mongoose';\n\nconnectDb()\n\nexport default async (req, res)=> {\n    switch(req.method){\n     case \"GET\":\n        await handleGetRequest(req,res);\n        break\n    case 'PUT':\n        await handlePutRequest(req, res);\n        break\n    default:\n        res.status(405).send(`Method ${req.method} not allowed`)\n    }\n}\n\n async function handleGetRequest(req, res){\n\n    if(!(\"authorization\" in req.headers)){\n        return res.status(401).send(\"No authorization token \")\n    }\n    try{\n        const { userId}=jwt.verify(req.headers.authorization,\n        process.env.JWT_SECRET)\n       const user = await User.findOne({_id: userId})\n        if(user){\n            res.status(200).json(user)\n\n        }else{\n            res.status(400).send(\"User not found\")\n        }\n    }catch(error){\n        res.status(403).send(\"Invalid Token\")\n\n    }\n}\n\nasync function handlePutRequest (req, res){\n    const {_id, role} = req.body \n    await User.findOneAndUpdate(\n        {_id},\n        {role},\n\n    )\n    res.status(203).send('User updated')\n\n}"]},"metadata":{},"sourceType":"module"}